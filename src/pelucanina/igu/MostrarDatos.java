/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pelucanina.igu;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import pelucanina.logica.Controladora;
import pelucanina.logica.Mascota;

/**
 *
 * @author Mario
 */
public class MostrarDatos extends javax.swing.JFrame {
    Controladora control=null;
    /**
     * Creates new form MostrarDatos
     */
    public MostrarDatos() {        
        initComponents();
        control=new Controladora();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        btnEliminar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnRegresar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 3, 48)); // NOI18N
        jLabel1.setText("Datos Clientes");

        jTable1.setBorder(new javax.swing.border.MatteBorder(null));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel2.setText("Datos de Mascotas");

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnRegresar.setText("Regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnRegresar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSalir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(242, 242, 242)
                .addComponent(jLabel1)
                .addContainerGap(249, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
  int filaSeleccionada = jTable1.getSelectedRow();
    
    if (filaSeleccionada >= 0) {
        // Obtener el NUMCLIENTE (ID) de la mascota seleccionada
        int numCliente = (int) jTable1.getValueAt(filaSeleccionada, 0);
        System.out.println("NUMCLIENTE seleccionado: " + numCliente);

        try {
            Controladora control = new Controladora();
            control.eliminarMascota(numCliente);
            
            // Actualizar la tabla después de la eliminación
            actualizarTabla();
            
            JOptionPane.showMessageDialog(null, "Dato eliminado con éxito.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error al eliminar el dato: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(null, "Seleccione un dato para eliminar.");
    }
}

private void actualizarTabla() {
    // Obtener la lista actualizada de mascotas
     System.out.println("Ejecutando metodo actualizarTabla.");
    
    Controladora control = new Controladora();
    List<Mascota> mascotas = control.traerMascotas();
    
    DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
    modelo.setRowCount(0);
    
    for (Mascota mascota : mascotas) {
        modelo.addRow(new Object[]{
            mascota.getNumCliente(), 
            mascota.getNombre(), 
            mascota.getRaza(), 
            mascota.getColor(), 
            mascota.getAlergico(), 
            mascota.getAtencionEspecial(), 
            mascota.getObservaciones(), 
            mascota.getNombreDueño(), 
            mascota.getCelDueño()
        });
    }
    
    System.out.println("Tabla actualizada con exito.");
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        int filaSeleccionada = jTable1.getSelectedRow();

    if (filaSeleccionada >= 0) {
        // Obtener los datos de la fila seleccionada
        int idMascota = (int) jTable1.getValueAt(filaSeleccionada, 0); // Asume que la primera columna contiene el ID
        String nombreMascota = (String) jTable1.getValueAt(filaSeleccionada, 1);
        String raza = (String) jTable1.getValueAt(filaSeleccionada, 2);
        String color = (String) jTable1.getValueAt(filaSeleccionada, 3);
        String alergico = (String) jTable1.getValueAt(filaSeleccionada, 4);
        String atencionEspecial = (String) jTable1.getValueAt(filaSeleccionada, 5);
        String observaciones = (String) jTable1.getValueAt(filaSeleccionada, 6);
        String nombreDuenio = (String) jTable1.getValueAt(filaSeleccionada, 7);
        String celDuenio = (String) jTable1.getValueAt(filaSeleccionada, 8);

        // Crear una nueva instancia de la ventana de edición
        EditarDatos editarWindow = new EditarDatos(idMascota, nombreMascota, raza, color, alergico, atencionEspecial, observaciones, nombreDuenio, celDuenio);
        
        // Centrar la ventana en la pantalla
        editarWindow.setLocationRelativeTo(null);
        
        // Hacer visible la pantalla de edición
        editarWindow.setVisible(true);
        
    } else {
        JOptionPane.showMessageDialog(null, "Seleccione una fila para editar.");
    }
   
    }//GEN-LAST:event_btnEditarActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        cargarTabla();
    }//GEN-LAST:event_formWindowOpened

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
         // TODO add your handling code here:
     int i = JOptionPane.showConfirmDialog(null, "¿Seguro que quiere salir?");
    if (i == JOptionPane.YES_OPTION) {
        System.exit(0); // Cierra la aplicación
    }
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        // TODO add your handling code here:
         // Crear una nueva instancia de la pantalla principal
    Principal principalWindow = new Principal();
    
    // Centrar la ventana en la pantalla
    principalWindow.setLocationRelativeTo(null);
    
    // Hacer visible la pantalla principal
    principalWindow.setVisible(true);
    
    // Cerrar la ventana actual
    this.dispose();
    }//GEN-LAST:event_btnRegresarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void cargarTabla() {
      // Crear un modelo de tabla con las columnas definidas
    DefaultTableModel tabla = new DefaultTableModel() {
        // Hacer que las celdas no sean editables
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };

    // Definir los títulos de las columnas
    String[] titulos = {
        "Num", "Nombre", "Raza", "Color", "Alergico", "Atencion Especial", "Observaciones", "Dueño", "Cel"
    };
    tabla.setColumnIdentifiers(titulos);

    // Obtener la lista de mascotas desde la controladora
    List<Mascota> listaMascotas = control.traerMascotas();

    // Verificar si la lista no es nula
    if (listaMascotas != null) {
        // Limpiar la tabla actual
        tabla.setRowCount(0);

        // Agregar cada mascota al modelo de la tabla
        for (int i = 0; i < listaMascotas.size(); i++) {
            Mascota mascota = listaMascotas.get(i);
            Object[] objeto = {
                mascota.getNumCliente(), // Cambiado de índice + 1 a el ID real de la mascota
                mascota.getNombre(),
                mascota.getRaza(),
                mascota.getColor(),
                mascota.getAlergico(),
                mascota.getAtencionEspecial(),
                mascota.getObservaciones(),
                mascota.getNombreDueño(),
                mascota.getCelDueño()
            };
            tabla.addRow(objeto);
        }
    }

    // Establecer el modelo en la tabla
    jTable1.setModel(tabla);
    }
}
